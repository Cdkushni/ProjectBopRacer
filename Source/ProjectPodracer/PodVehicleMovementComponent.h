// This header defines our custom movement component for the PodVehicle.
// It handles applying movement and steering forces, and integrates with network prediction.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/PawnMovementComponent.h"
#include "PodVehicleMovementComponent.generated.h"

class APodVehicle;

// Define a struct to hold client move data for prediction and reconciliation
USTRUCT()
struct FClientMoveData
{
	GENERATED_BODY()

	// Input values
	UPROPERTY()
	float MoveForwardInput;
	UPROPERTY()
	float TurnRightInput;
	UPROPERTY()
	bool bIsBoosting;
	UPROPERTY()
	bool bIsBraking;
	UPROPERTY()
	bool bIsDrifting;

	// Unique ID for this move, used for reconciliation
	UPROPERTY()
	uint32 MoveID;

	// DeltaTime that the client used for this move's prediction
	UPROPERTY()
	float DeltaTime; 

	FClientMoveData() 
		: MoveForwardInput(0.0f), TurnRightInput(0.0f), bIsBoosting(false), bIsBraking(false), bIsDrifting(false), MoveID(0), DeltaTime(0.0f) {}
	FClientMoveData(float InForward, float InTurn, bool InBoosting, bool InBraking, bool InDrifting, uint32 InID, float InDeltaTime)
		: MoveForwardInput(InForward), TurnRightInput(InTurn), bIsBoosting(InBoosting), bIsBraking(InBraking), bIsDrifting(InDrifting), MoveID(InID), DeltaTime(InDeltaTime) {}

	// For TArray::RemoveSingle, needed to compare moves
	bool operator==(const FClientMoveData& Other) const
	{
		return MoveID == Other.MoveID;
	}
};

/**
 * Custom movement component for the PodVehicle, handling high-speed arcade physics
 * and network replication for smooth multiplayer gameplay.
 */
UCLASS()
class PROJECTPODRACER_API UPodVehicleMovementComponent : public UPawnMovementComponent
{
	GENERATED_BODY()

public:
	UPodVehicleMovementComponent();
	
	virtual void BeginPlay() override;

	// Overrides from UPawnMovementComponent
	// This is where the core movement logic for the vehicle will live.
	virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;

	// --- Input State ---
	// Stores the current desired forward movement input (e.g., from W/S keys or joystick).
	// Value is typically between -1.0 (backward) and 1.0 (forward).
	UPROPERTY(Transient, Replicated) // Transient: Not saved. Replicated: Sent over network.
	float MoveForwardInput;
	// Stores the current desired turning input (e.g., from A/D keys or joystick).
	// Value is typically between -1.0 (left) and 1.0 (right).
	UPROPERTY(Transient, Replicated)
	float TurnRightInput;
	// Is the boost button currently held?
	UPROPERTY(Transient, Replicated)
	bool bIsBoosting;
	// Is the brake button currently held?
	UPROPERTY(Transient, Replicated)
	bool bIsBraking;
	// Is the drift button currently held?
	UPROPERTY(Transient, Replicated)
	bool bIsDrifting;

	// --- Replicated Angular State ---
	// Current angular velocity around the Yaw axis. Replicated for simulated proxies.
	UPROPERTY(Transient, Replicated)
	float CurrentAngularYawVelocity;

	// Setter for MoveForwardInput, used by the owning PodVehicle.
	void SetMoveForwardInput(float Value);
	// Setter for TurnRightInput, used by the owning PodVehicle.
	void SetTurnRightInput(float Value);
	// Setter for bIsBoosting.
	void SetBoostInput(bool bNewState);
	// Setter for bIsBraking.
	void SetBrakeInput(bool bNewState);
	// Setter for bIsDrifting.
	void SetDriftInput(bool bNewState);

	// --- Server RPCs for Client Input ---
	// This RPC is called by the client to send its MoveForward input to the server.
	UFUNCTION(Server, Unreliable) // Unreliable for frequent input, client will resend if needed
	void Server_ProcessMove(FClientMoveData ClientMove);
	// No _Implementation for RPCs here, generated by UHT.

	// --- Client RPC for Server Acknowledgment ---
	// This RPC is called by the server to send authoritative state back to the owning client.
	UFUNCTION(Client, Reliable)
	void Client_AcknowledgeMove(uint32 LastProcessedMoveID, FVector ServerLocation, FRotator ServerRotation, FVector ServerVelocity, float ServerAngularYawVelocity);


	// --- Vehicle Physics Parameters ---
	// Max linear speed (cm/s)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement")
	float MaxSpeed;
	// Linear acceleration rate (cm/s^2)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement")
	float Acceleration;
	// Deceleration rate when no forward input is applied (cm/s^2)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement")
	float Deceleration;
	// Linear damping (0-1, 1 means instant stop)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement")
	float LinearDamping;
	// Rate at which the pod can turn (degrees per second).
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement")
	float TurnSpeed;
	// Max target angular velocity for turning (degrees/s)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Steering")
	float MaxTurnRate;
	// Angular acceleration for turning (degrees/s^2)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Steering")
	float TurnAcceleration;
	// Angular damping for turning (0-1, 1 means instant stop)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Steering")
	float AngularDamping;
	// Multiplier for steering at MaxSpeed (0 to 1, lower = less turn)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Steering")
	float HighSpeedSteeringDampFactor;
	// Speed for interpolating keyboard input to smoothed input
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Steering")
	float KeyboardSteeringInterpSpeed;
	// Speed for returning smoothed input to 0
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Steering")
	float KeyboardSteeringReturnSpeed;

	// Boost related parameters
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Boost")
	float BoostAcceleration; // Additional acceleration when boosting (cm/s^2)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Boost")
	float BoostMaxSpeedMultiplier; // Max speed multiplier when boosting

	// Brake related parameters
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Brake")
	float BrakeDeceleration; // Deceleration rate when braking (cm/s^2)

	// Drift related parameters
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Drift")
	float DriftTurnSpeedMultiplier; // How much turn speed is multiplied when drifting
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Drift")
	float DriftLinearDampingMultiplier; // Multiplier for linear damping when drifting (lower = more slide)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Drift")
	float DriftAngularDampingMultiplier; // Multiplier for angular damping when drifting (lower = sustains spin more)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Drift")
	float DriftLateralSlideFactor; // How much lateral velocity is retained when drifting (0-1, 1 means no lateral friction)

	// Air control parameters
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|AirControl")
	float AirControlTurnFactor; // How much TurnRightInput affects Yaw when airborne
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|AirControl")
	float AirControlPitchFactor; // How much Forward/Backward input affects Pitch when airborne (e.g. for tilting)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|AirControl")
	float AirControlRollFactor; // How much TurnRightInput affects Roll when airborne

	// Air Resistance
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodRacer|Movement")
	float DragCoefficient; // Interpolation speed for air resistance

	// Ground detection parameters
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|GroundDetection")
	float GroundTraceDistance; // How far down to trace for ground
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|GroundDetection")
	float GroundDetectionRadius; // Radius for ground detection trace
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|GroundDetection")
	TEnumAsByte<ECollisionChannel> GroundCollisionChannel; // Collision channel for ground trace

	// Threshold for position difference before a client correction occurs (e.g., in cm)
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement|Networking")
	float CorrectionThreshold;

	// Gravity applied when airborne
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement")
	float GravityScale;

	// Visual Configuration

	// Max angle of engine turn roll rotation
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "PodMovement")
	float AngleOfRoll;

	UPROPERTY()
	APodVehicle* OwningPodVehicle;

	// --- Network Replication ---
	virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;

protected:
	// A counter for unique move IDs for client prediction.
	uint32 CurrentMoveID;

	// History of client-side moves for reconciliation.
	TArray<FClientMoveData> ClientMoveHistory;
	
	// Smoothed rudder input for smoother steering, particularly for keyboard.
	float SmoothedRudderInput;

	FVector CurrentVelocity = FVector::ZeroVector;
	FVector GroundNormal = FVector::UpVector;

	// Helper function to apply movement logic for a given input.
	// This function will be called on the client for prediction and replay, and on the server for authority.
	void ApplyMovementLogic(float InMoveForwardInput, float InTurnRightInput, bool InIsBoosting, bool InIsBraking, bool InIsDrifting, float InDeltaTime, FVector& OutVelocity, FRotator& OutRotation, float& OutAngularYawVelocity);

	FHitResult HoverLineTrace(FVector StartLocation, float TraceDistance, FCollisionQueryParams QueryParams);
	FVector HoverLineTraceNormal(FVector StartLocation, float TraceDistance, FCollisionQueryParams QueryParams);
	void AdjustVehiclePitch(float DeltaTime);
	void HandleEngineHoveringVisuals(float InTurnRightInput, float DeltaTime);
	
	// Ground detection
	bool IsGrounded() const;
};